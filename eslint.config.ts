import eslint from '@eslint/js';
import tsParser from '@typescript-eslint/parser';
import eslintConfigPrettier from 'eslint-config-prettier';
import eslintPluginImportX from 'eslint-plugin-import-x';
import reactPlugin from 'eslint-plugin-react';
import reactHooks from 'eslint-plugin-react-hooks';
import globals from 'globals';
import tseslint from 'typescript-eslint';

export default tseslint.config(
  eslint.configs.recommended,
  {
    rules: {
      'arrow-body-style': ['warn', 'as-needed'],
      'arrow-parens': ['warn', 'as-needed', { requireForBlockBody: true }],
      'arrow-spacing': 'warn',
      'block-spacing': ['warn', 'always'],
      'brace-style': ['warn', 'stroustrup', { allowSingleLine: true }],
      camelcase: 'warn',
      'comma-dangle': ['warn', { arrays: 'always-multiline', objects: 'always-multiline' }],
      'comma-spacing': 'warn',
      curly: 'warn',
      'eol-last': ['warn', 'always'],
      eqeqeq: 'warn',
      'func-style': ['warn', 'declaration'],
      indent: ['warn', 2, { SwitchCase: 1, ignoredNodes: ['PropertyDefinition'] }],
      'jsx-quotes': ['warn', 'prefer-double'],
      'key-spacing': 'warn',
      'keyword-spacing': 'warn',
      'lines-between-class-members': ['warn', 'always', { exceptAfterSingleLine: true }],
      'max-len': ['warn', { code: 120 }],
      'no-await-in-loop': 'warn',
      'no-console': ['warn', { allow: ['info', 'warn', 'error'] }],
      'no-else-return': ['warn', { allowElseIf: false }],
      'no-extra-boolean-cast': 'warn',
      'no-implicit-coercion': 'warn',
      'no-multiple-empty-lines': ['warn', { max: 1, maxBOF: 0, maxEOF: 0 }],
      'no-new-wrappers': 'warn',
      'no-new': 'warn',
      'no-param-reassign': 'warn',
      'no-restricted-imports': ['warn', { patterns: [{ regex: '^@mui/[^/]+$' }] }],
      'no-trailing-spaces': 'warn',
      'no-unneeded-ternary': 'warn',
      'no-unused-vars': 'off',
      'no-var': 'warn',
      'no-whitespace-before-property': 'warn',
      'object-curly-spacing': ['warn', 'always'],
      'object-shorthand': 'warn',
      'one-var': ['warn', 'never'],
      'operator-linebreak': ['warn', 'after', { overrides: { '?': 'ignore', ':': 'ignore' } }],
      'padded-blocks': ['warn', 'never'],
      'prefer-const': 'warn',
      'quote-props': ['warn', 'consistent-as-needed'],
      quotes: ['warn', 'single', { avoidEscape: true }],
      'require-atomic-updates': 'warn',
      semi: ['warn', 'always', { omitLastInOneLineBlock: true }],
      'space-before-blocks': 'warn',
      'space-before-function-paren': 'off',
      'space-in-parens': ['warn', 'never'],
      'space-infix-ops': ['warn', { int32Hint: false }],
      'spaced-comment': [
        'warn',
        'always',
        { markers: ['/'], block: { exceptions: ['*'] }, line: { exceptions: ['/'] } },
      ],
      yoda: 'warn',
    },
  },
  tseslint.configs.strictTypeChecked,
  tseslint.configs.stylisticTypeChecked,
  {
    languageOptions: {
      parserOptions: {
        parser: tsParser,
        projectService: true,
        // tsconfigRootDir: import.meta.dirname,
      },
    },
    rules: {
      '@typescript-eslint/array-type': 'warn',
      '@typescript-eslint/ban-ts-comment': 'warn',
      '@typescript-eslint/consistent-generic-constructors': 'warn',
      '@typescript-eslint/consistent-indexed-object-style': 'warn',
      '@typescript-eslint/consistent-type-assertions': 'warn',
      '@typescript-eslint/consistent-type-definitions': 'warn',
      '@typescript-eslint/consistent-type-imports': 'warn',
      '@typescript-eslint/dot-notation': 'warn',
      '@typescript-eslint/method-signature-style': 'warn',
      '@typescript-eslint/no-array-constructor': 'warn',
      '@typescript-eslint/no-confusing-void-expression': [
        'warn',
        { ignoreArrowShorthand: true, ignoreVoidReturningFunctions: true },
      ],
      '@typescript-eslint/no-empty-function': 'off',
      '@typescript-eslint/no-floating-promises': 'warn',
      '@typescript-eslint/no-misused-promises': ['warn', { checksVoidReturn: { attributes: false } }],
      '@typescript-eslint/no-shadow': 'warn',
      '@typescript-eslint/no-unnecessary-type-assertion': 'warn',
      '@typescript-eslint/no-unsafe-argument': 'warn',
      '@typescript-eslint/no-unsafe-assignment': 'warn',
      '@typescript-eslint/no-unsafe-call': 'warn',
      '@typescript-eslint/no-unsafe-member-access': 'warn',
      '@typescript-eslint/no-unsafe-return': 'warn',
      '@typescript-eslint/no-unused-vars': ['warn', { argsIgnorePattern: '^_', varsIgnorePattern: '^_' }],
      '@typescript-eslint/no-use-before-define': ['warn', { functions: false, classes: false }],
      '@typescript-eslint/prefer-nullish-coalescing': ['warn', { ignorePrimitives: { boolean: true } }],
      '@typescript-eslint/require-await': 'warn',
      '@typescript-eslint/restrict-template-expressions': ['warn', { allowNumber: true }],
      '@typescript-eslint/return-await': 'warn',
    },
  },
  eslintPluginImportX.flatConfigs.recommended,
  eslintPluginImportX.flatConfigs.typescript,
  {
    rules: {
      'import-x/consistent-type-specifier-style': 'warn',
      'import-x/newline-after-import': ['warn', { count: 1, exactCount: true, considerComments: true }],
      'import-x/order': ['warn', { alphabetize: { order: 'asc' }, 'newlines-between': 'always' }],
    },
  },
  reactPlugin.configs.flat.recommended,
  reactPlugin.configs.flat['jsx-runtime'],
  {
    languageOptions: {
      ...reactPlugin.configs.flat.recommended.languageOptions,
      ecmaVersion: 'latest',
      sourceType: 'module',
      globals: {
        ...globals.browser,
      },
    },
    settings: {
      react: {
        version: 'detect',
      },
    },
    rules: {
      'react/display-name': ['warn'],
      'react/forbid-component-props': ['warn', { forbid: ['style', 'sx'] }],
      'react/forbid-dom-props': ['warn', { forbid: ['style'] }],
      'react/function-component-definition': 'warn',
      'react/hook-use-state': 'warn',
      'react/jsx-boolean-value': 'warn',
      'react/jsx-closing-bracket-location': 'warn',
      'react/jsx-closing-tag-location': 'warn',
      'react/jsx-curly-brace-presence': 'warn',
      'react/jsx-first-prop-new-line': 'warn',
      'react/jsx-max-props-per-line': ['warn', { when: 'multiline' }],
      'react/jsx-no-useless-fragment': ['warn', { allowExpressions: true }],
      'react/jsx-props-no-multi-spaces': 'warn',
      'react/jsx-tag-spacing': ['warn', { beforeClosing: 'never' }],
      'react/jsx-wrap-multilines': [
        'warn',
        { assignment: 'ignore', declaration: 'ignore', return: 'parens-new-line', arrow: 'ignore' },
      ],
      'react/self-closing-comp': 'warn',
    },
  },
  {
    plugins: {
      'react-hooks': reactHooks,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-hooks/rules-of-hooks': 'warn',
    },
  },
  eslintConfigPrettier,
);
